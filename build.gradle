apply plugin: 'com.android.library'
apply plugin: 'maven'

// This property value is for couchbase-lite-java-forestdb
ext.spec = "android"

version = System.getenv("MAVEN_UPLOAD_VERSION")

buildscript {
    repositories {
        jcenter()
        google()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.3.0'
    }
}

repositories {
    mavenLocal()
    maven { url 'http://files.couchbase.com/maven2/' }
    mavenCentral()
    google()
}

android {
    compileSdkVersion 28
    buildToolsVersion '28.0.3'

    defaultConfig {
        minSdkVersion 9
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
    }
    flavorDimensions "default"
    
    

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_6
        targetCompatibility JavaVersion.VERSION_1_6
    }

    buildTypes {
        release {
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }

    lintOptions {
        abortOnError false
    }

    // workaround for "duplicate files during packaging of APK" issue
    // see https://groups.google.com/d/msg/adt-dev/bl5Rc4Szpzg/wC8cylTWuIEJ
    packagingOptions {
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
    }
}

def buildAndroidWithArtifacts = System.getProperty("buildAndroidWithArtifacts")

dependencies {
    implementation buildAndroidWithArtifacts == null ?
            project(':libraries:couchbase-lite-java-core') :
            'com.couchbase.lite:couchbase-lite-java-core:' + version

    implementation buildAndroidWithArtifacts == null ?
            project(':libraries:couchbase-lite-java-native:sqlite-custom') :
            'com.couchbase.lite:couchbase-lite-android-sqlite-custom:' + version

    // Libraries required for tests only:
    androidTestImplementation buildAndroidWithArtifacts == null ?
            project(':libraries:couchbase-lite-java-native:sqlcipher') :
            'com.couchbase.lite:couchbase-lite-android-sqlcipher:' + version

    androidTestImplementation buildAndroidWithArtifacts == null ?
            project(':libraries:couchbase-lite-java-forestdb') :
            'com.couchbase.lite:couchbase-lite-android-forestdb:' + version

    androidTestImplementation 'commons-io:commons-io:2.0.1'
    androidTestImplementation 'com.squareup.okhttp3:mockwebserver:3.3.1'

    // For JavaScript query test
    androidTestImplementation ('com.couchbase.lite:couchbase-lite-java-javascript:1.4.+'){
        exclude group: 'com.couchbase.lite', module: 'couchbase-lite-java-core'
    }
}

task generateJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    List<File> pathList = new ArrayList<File>();
    pathList.add(file('./libraries/couchbase-lite-java-core/extra/doclet/doclet.jar'))
    options.docletpath = pathList
    options.doclet = "ExcludeDoclet"
    options.showFromPublic()
    exclude "org/apache/http/**", "com/couchbase/touchdb/**"
}

task createMavenDirectory(type: Exec) {
    //these envs are required only to upload maven artifacts
    print project.getGradle()
    if (project.getGradle().toString().contains("createMavenDirectory")) {
        if (System.getenv("MAVEN_UPLOAD_REPO_URL") == null) {
            throw new GradleException("Please set MAVEN_UPLOAD_REPO_URL !!!")
        }
        if (System.getenv("MAVEN_UPLOAD_USERNAME") == null) {
            throw new GradleException("Please set MAVEN_UPLOAD_USERNAME !!!")
        }
        if (System.getenv("MAVEN_UPLOAD_PASSWORD") == null) {
            throw new GradleException("Please set MAVEN_UPLOAD_PASSWORD !!!")
        }
        if (System.getenv("MAVEN_UPLOAD_VERSION") == null) {
            throw new GradleException("Please set MAVEN_UPLOAD_VERSION !!!")
        }
    }

    ext {
        uploadUser = System.getenv("MAVEN_UPLOAD_USERNAME") + ":" + System.getenv("MAVEN_UPLOAD_PASSWORD")
        mkcolPath = System.getenv("MAVEN_UPLOAD_REPO_URL") + "com/couchbase/lite/couchbase-lite-android/" + System.getenv("MAVEN_UPLOAD_VERSION") + "/"
    }
    commandLine "curl", "--user", uploadUser, "-X", "MKCOL", mkcolPath
}

// this hack is only needed for apache mod_dav based Maven repo's like file.couchbase.com.  otherwise, skip it
createMavenDirectory.onlyIf { System.getenv("MAVEN_UPLOAD_REPO_URL").contains("files") }

// first create the directory, then do the upload
task uploadArchivesWrapper(dependsOn: createMavenDirectory) << {
    uploadArchives.execute()
}

def mavenPath() {
    System.getenv("MAVEN_BUILD_LOCAL") == "true" ?
            'file://' + new File(System.getProperty('user.home'), '.m2/repository').absolutePath :
            System.getenv("MAVEN_UPLOAD_REPO_URL")
}

// this will upload, but will not first create a directory (which is needed on some servers)
uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: mavenPath()) {
                authentication(userName: System.getenv("MAVEN_UPLOAD_USERNAME"), password: System.getenv("MAVEN_UPLOAD_PASSWORD"))
            }
            pom.version = System.getenv("MAVEN_UPLOAD_VERSION") != null ? System.getenv("MAVEN_UPLOAD_VERSION") : ''
            pom.groupId = 'com.couchbase.lite'
            pom.artifactId = 'couchbase-lite-android'
            pom.project {
                licenses {
                    license {
                        name 'Couchbase Community Edition License Agreement'
                        url 'http://www.couchbase.com/agreement/community'
                        distribution 'repo'
                    }
                }
            }
        }
    }
}


task sourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

artifacts {
    archives sourcesJar
}
